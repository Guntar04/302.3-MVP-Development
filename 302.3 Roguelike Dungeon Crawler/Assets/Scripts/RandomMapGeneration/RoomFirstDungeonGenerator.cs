using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Random = UnityEngine.Random;

public class RoomFirstDungeonGenerator : SimpleRandomWalkDungeonGenerator
{
    [Header("Room Settings")]
    [SerializeField] private int minRoomWidth = 4;
    [SerializeField] private int minRoomHeight = 4;
    [SerializeField] private int dungeonWidth = 20;
    [SerializeField] private int dungeonHeight = 20;
    [SerializeField][Range(0, 10)] private int offset = 1;
    [SerializeField] private bool randomWalkRooms = false;

    [Header("Runtime generation")]
    [SerializeField] private bool autoGenerateOnStart = true;

    private void Start()
    {
        if (autoGenerateOnStart)
            Regenerate();
    }

    protected override void RunProceduralGeneration()
    {
        CreateRooms();
    }

    private void CreateRooms()
    {
        var space = new BoundsInt((Vector3Int)startPosition, new Vector3Int(dungeonWidth, dungeonHeight, 0));
        Debug.Log($"RoomFirstDungeonGenerator: Creating rooms in space {space} (minRoom {minRoomWidth}x{minRoomHeight}, offset {offset})");

        var roomsList = ProceduralGenerationAlgorithms.BinarySpacePartitioning(space, minRoomWidth, minRoomHeight);
        int bspCount = roomsList == null ? 0 : roomsList.Count;
        Debug.Log($"RoomFirstDungeonGenerator: BSP returned {bspCount} rooms.");

        if (roomsList == null || roomsList.Count == 0)
        {
            Debug.LogWarning("RoomFirstDungeonGenerator: No rooms generated by BSP. Try lowering MinRoomWidth/MinRoomHeight or increasing dungeon size.");
            return;
        }

        HashSet<Vector2Int> floor = new HashSet<Vector2Int>();

        if (randomWalkRooms)
            floor = CreateRoomsRandomly(roomsList);
        else
            floor = CreateSimpleRooms(roomsList);

        Debug.Log($"RoomFirstDungeonGenerator: Floor positions generated: {floor.Count}");

        List<Vector2Int> roomCenters = new List<Vector2Int>();
        foreach (var room in roomsList)
            roomCenters.Add((Vector2Int)Vector3Int.RoundToInt(room.center));

        HashSet<Vector2Int> corridors = ConnectRooms(roomCenters);
        floor.UnionWith(corridors);

        Debug.Log($"RoomFirstDungeonGenerator: After connecting rooms floor count={floor.Count} corridors={corridors.Count}");

        if (tileMapVisualizer == null)
        {
            Debug.LogError("RoomFirstDungeonGenerator: tileMapVisualizer not assigned.");
            return;
        }

        tileMapVisualizer.Clear();
        tileMapVisualizer.PaintFloorTiles(floor);
        WallGenerator.CreateWalls(floor, tileMapVisualizer);

        PopulateDungeonDataAndRunProcessors(roomsList, floor, corridors);
    }

    private void PopulateDungeonDataAndRunProcessors(List<BoundsInt> roomsList, HashSet<Vector2Int> floor, HashSet<Vector2Int> corridors)
    {
        // Ensure a DungeonData exists
        DungeonData dd = FindFirstObjectByType<DungeonData>();
        if (dd == null)
        {
            var go = new GameObject("DungeonData");
            dd = go.AddComponent<DungeonData>();
            Debug.Log("RoomFirstDungeonGenerator: Created new DungeonData object.");
        }
        else
        {
            // Try to Reset if available, otherwise clear Rooms collection
            var resetMethod = dd.GetType().GetMethod("Reset");
            if (resetMethod != null)
            {
                resetMethod.Invoke(dd, null);
                Debug.Log("RoomFirstDungeonGenerator: Called DungeonData.Reset().");
            }
            else
            {
                // defensive: ensure Rooms list exists and is cleared
                if (dd.Rooms == null) dd.Rooms = new List<Room>();
                else dd.Rooms.Clear();
                Debug.Log("RoomFirstDungeonGenerator: Cleared existing DungeonData.Rooms.");
            }
        }

        int addedRooms = 0;
        // Build rooms from BSP bounds but use actual floor tiles (so random-walk rooms work)
        foreach (var bounds in roomsList)
        {
            HashSet<Vector2Int> roomFloor = new HashSet<Vector2Int>();
            for (int x = bounds.xMin + offset; x < bounds.xMax - offset; x++)
            {
                for (int y = bounds.yMin + offset; y < bounds.yMax - offset; y++)
                {
                    var pos = new Vector2Int(x, y);
                    if (floor.Contains(pos) && !corridors.Contains(pos))
                        roomFloor.Add(pos);
                }
            }

            if (roomFloor.Count == 0)
            {
                Debug.Log($"RoomFirstDungeonGenerator: BSP room at {bounds.min} size {bounds.size} produced 0 floor tiles (offset may be too large).");
                continue;
            }

            Vector2 center = GetRoomCenterFromTiles(roomFloor);
            dd.Rooms.Add(new Room(center, roomFloor));
            addedRooms++;
        }

        dd.Path = new HashSet<Vector2Int>(corridors);
        Debug.Log($"RoomFirstDungeonGenerator: Populated DungeonData with {addedRooms} rooms. DungeonData.Path count={dd.Path?.Count ?? 0}");

        // invoke downstream processors (they should check dd.Rooms)
        // use reflection helper to avoid compile-time dependency on optional processor types
        InvokeProcessorByName("RoomDataExtractor", "ProcessRooms");
        InvokeProcessorByName("PropPlacementManager", "ProcessRooms");
        InvokeProcessorByName("AgentPlacer", "PlaceAgents");
    }

    private Vector2 GetRoomCenterFromTiles(HashSet<Vector2Int> tiles)
    {
        if (tiles == null || tiles.Count == 0) return Vector2.zero;
        float sx = 0f, sy = 0f;
        foreach (var t in tiles) { sx += t.x; sy += t.y; }
        float n = tiles.Count;
        return new Vector2(sx / n, sy / n);
    }

    private HashSet<Vector2Int> CreateRoomsRandomly(List<BoundsInt> roomsList)
    {
        HashSet<Vector2Int> floor = new HashSet<Vector2Int>();
        for (int i = 0; i < roomsList.Count; i++)
        {
            var roomBounds = roomsList[i];
            var roomCenter = new Vector2Int(Mathf.RoundToInt(roomBounds.center.x), Mathf.RoundToInt(roomBounds.center.y));
            var roomFloor = RunRandomWalk(randomWalkParameters, roomCenter);
            foreach (var position in roomFloor)
            {
                if (position.x >= (roomBounds.xMin + offset) && position.x <= (roomBounds.xMax - offset) && position.y >= (roomBounds.yMin - offset) && position.y <= (roomBounds.yMax - offset))
                {
                    floor.Add(position);
                }
            }
        }
        return floor;
    }

    private HashSet<Vector2Int> ConnectRooms(List<Vector2Int> roomCenters)
    {
        HashSet<Vector2Int> corridors = new HashSet<Vector2Int>();
        var currentRoomCenter = roomCenters[Random.Range(0, roomCenters.Count)];
        roomCenters.Remove(currentRoomCenter);

        while (roomCenters.Count > 0)
        {
            Vector2Int closest = FindClosestPointTo(currentRoomCenter, roomCenters);
            roomCenters.Remove(closest);
            HashSet<Vector2Int> newCorridor = CreateCorridor(currentRoomCenter, closest);
            currentRoomCenter = closest;
            corridors.UnionWith(newCorridor);
        }
        return corridors;
    }
    private HashSet<Vector2Int> CreateCorridor(Vector2Int currentRoomCenter, Vector2Int destination)
    {
        HashSet<Vector2Int> corridor = new HashSet<Vector2Int>();
        var position = currentRoomCenter;
        corridor.Add(position);
        while (position.y != destination.y)
        {
            if (destination.y > position.y)
            {
                position += Vector2Int.up;
            }
            else if (destination.y < position.y)
            {
                position += Vector2Int.down;
            }
            corridor.Add(position);
            corridor.Add(position + Vector2Int.right); // Add extra width
        }
        while (position.x != destination.x)
        {
            if (destination.x > position.x)
            {
                position += Vector2Int.right;
            }
            else if (destination.x < position.x)
            {
                position += Vector2Int.left;
            }
            corridor.Add(position);
            corridor.Add(position + Vector2Int.up); // Add extra width
        }
        return corridor;
    }


    private Vector2Int FindClosestPointTo(Vector2Int currentRoomCenter, List<Vector2Int> roomCenters)
    {
        Vector2Int closest = Vector2Int.zero;
        float distance = float.MaxValue;
        foreach (var position in roomCenters)
        {
            float currentDistance = Vector2.Distance(position, currentRoomCenter);
            if (currentDistance < distance)
            {
                distance = currentDistance;
                closest = position;
            }
        }
        return closest;
    }

    /// <summary>
    /// Reflection helper that finds a type by name, then locates an instance and invokes a no-arg method on it.
    /// This avoids compile-time dependency on optional components and avoids obsolete generic FindObjectOfType<T>() calls.
    /// </summary>
    private void InvokeProcessorByName(string typeName, string methodName)
    {
        try
        {
            // find the type by name across loaded assemblies
            var type = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(a =>
                {
                    try { return a.GetTypes(); } catch { return new Type[0]; }
                })
                .FirstOrDefault(t => t.Name == typeName);

            if (type == null) return;

            // try to find an instantiated object of that type
            var objs = UnityEngine.Resources.FindObjectsOfTypeAll(type);
            if (objs == null || objs.Length == 0) return;

            var instance = objs[0];
            var method = type.GetMethod(methodName, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic);
            method?.Invoke(instance, null);
        }
        catch (System.Exception ex)
        {
            Debug.LogWarning($"RoomFirstDungeonGenerator: Failed to invoke processor {typeName}.{methodName}: {ex.Message}");
        }
    }

    private HashSet<Vector2Int> CreateSimpleRooms(List<BoundsInt> roomsList)
    {
        HashSet<Vector2Int> floor = new HashSet<Vector2Int>();
        foreach (var room in roomsList)
        {
            for (int col = offset; col < room.size.x - offset; col++)
            {
                for (int row = offset; row < room.size.y - offset; row++)
                {
                    Vector2Int position = (Vector2Int)room.min + new Vector2Int(col, row);
                    floor.Add(position);
                }
            }
        }
        return floor;
    }

    /// <summary>
    /// Clear any previous dungeon data/tiles/temporary objects and generate a new dungeon.
    /// Safe to call at runtime.
    /// </summary>
    public void Regenerate()
    {
        ClearDungeon();
        RunProceduralGeneration();

        // start coroutine to wait for DungeonData/rooms then spawn
        StartCoroutine(WaitForRoomsThenSpawn(2f)); // 2s timeout
    }

    private IEnumerator WaitForRoomsThenSpawn(float timeout)
    {
        float t = 0f;
        DungeonData dd = null;
        while (t < timeout)
        {
            dd = UnityEngine.Object.FindFirstObjectByType<DungeonData>();
            if (dd != null && dd.Rooms != null && dd.Rooms.Count > 0)
                break;
            t += Time.deltaTime;
            yield return null;
        }

        if (dd == null || dd.Rooms == null || dd.Rooms.Count == 0)
        {
            Debug.LogWarning("RoomFirstDungeonGenerator: No rooms found after generation.");
            yield break;
        }

        // call spawners now that rooms exist
        FindFirstObjectByType<PlayerSpawner>()?.PlacePlayer();
        FindFirstObjectByType<EnemySpawner>()?.PlaceEnemies();
        FindFirstObjectByType<ExitSpawner>()?.SpawnExit();
    }

    /// <summary>
    /// Clears tilemaps, possible spawned parent objects and resets DungeonData so generation starts fresh.
    /// </summary>
    public void ClearDungeon()
    {
        // clear visualizer tilemaps
        if (tileMapVisualizer != null)
            tileMapVisualizer.Clear();

        // if you merged SimpleDungeonGenerator fields, also clear direct Tilemaps if assigned
        var roomMapField = GetType().GetField("roomMap", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        var colliderMapField = GetType().GetField("colliderMap", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        if (roomMapField != null)
        {
            var roomMap = roomMapField.GetValue(this) as UnityEngine.Tilemaps.Tilemap;
            roomMap?.ClearAllTiles();
        }
        if (colliderMapField != null)
        {
            var colliderMap = colliderMapField.GetValue(this) as UnityEngine.Tilemaps.Tilemap;
            colliderMap?.ClearAllTiles();
        }

        // destroy common helper parent GameObjects created by spawners / debug helpers
        string[] parents = new[] { "PlacedProps", "SpawnedEnemies", "DebugFloor" };
        foreach (var name in parents)
        {
            var go = GameObject.Find(name);
            if (go != null)
            {
#if UNITY_EDITOR
                // immediate remove in editor
                UnityEngine.Object.DestroyImmediate(go);
#else
                Destroy(go);
#endif
            }
        }

        // reset / recreate DungeonData
        var dd = UnityEngine.Object.FindFirstObjectByType<DungeonData>();
        if (dd != null)
        {
            // try Reset() if available, otherwise destroy and recreate
            var resetMethod = dd.GetType().GetMethod("Reset");
            if (resetMethod != null)
            {
                resetMethod.Invoke(dd, null);
            }
            else
            {
                // destroy and recreate
#if UNITY_EDITOR
                UnityEngine.Object.DestroyImmediate(dd.gameObject);
#else
                Destroy(dd.gameObject);
#endif
                var go = new GameObject("DungeonData");
                go.AddComponent<DungeonData>();
            }

            // also remove any previously spawned player reference
            if (dd.PlayerReference != null)
            {
#if UNITY_EDITOR
                UnityEngine.Object.DestroyImmediate(dd.PlayerReference);
#else
                Destroy(dd.PlayerReference);
#endif
                dd.PlayerReference = null;
            }
        }
        else
        {
            var go = new GameObject("DungeonData");
            go.AddComponent<DungeonData>();
        }
    }
}